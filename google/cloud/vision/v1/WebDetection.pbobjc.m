// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/vision/v1/web_detection.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <googleapis/WebDetection.pbobjc.h>
#import <googleapis/Annotations.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GCVNWebDetectionRoot

@implementation GCVNWebDetectionRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - GCVNWebDetectionRoot_FileDescriptor

static GPBFileDescriptor *GCVNWebDetectionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.vision.v1"
                                                 objcPrefix:@"GCVN"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GCVNWebDetection

@implementation GCVNWebDetection

@dynamic webEntitiesArray, webEntitiesArray_Count;
@dynamic fullMatchingImagesArray, fullMatchingImagesArray_Count;
@dynamic partialMatchingImagesArray, partialMatchingImagesArray_Count;
@dynamic pagesWithMatchingImagesArray, pagesWithMatchingImagesArray_Count;
@dynamic visuallySimilarImagesArray, visuallySimilarImagesArray_Count;
@dynamic bestGuessLabelsArray, bestGuessLabelsArray_Count;

typedef struct GCVNWebDetection__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *webEntitiesArray;
  NSMutableArray *fullMatchingImagesArray;
  NSMutableArray *partialMatchingImagesArray;
  NSMutableArray *pagesWithMatchingImagesArray;
  NSMutableArray *visuallySimilarImagesArray;
  NSMutableArray *bestGuessLabelsArray;
} GCVNWebDetection__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "webEntitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNWebDetection_WebEntity),
        .number = GCVNWebDetection_FieldNumber_WebEntitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNWebDetection__storage_, webEntitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fullMatchingImagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNWebDetection_WebImage),
        .number = GCVNWebDetection_FieldNumber_FullMatchingImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNWebDetection__storage_, fullMatchingImagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "partialMatchingImagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNWebDetection_WebImage),
        .number = GCVNWebDetection_FieldNumber_PartialMatchingImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNWebDetection__storage_, partialMatchingImagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagesWithMatchingImagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNWebDetection_WebPage),
        .number = GCVNWebDetection_FieldNumber_PagesWithMatchingImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNWebDetection__storage_, pagesWithMatchingImagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "visuallySimilarImagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNWebDetection_WebImage),
        .number = GCVNWebDetection_FieldNumber_VisuallySimilarImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNWebDetection__storage_, visuallySimilarImagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bestGuessLabelsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNWebDetection_WebLabel),
        .number = GCVNWebDetection_FieldNumber_BestGuessLabelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNWebDetection__storage_, bestGuessLabelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GCVNWebDetection class]
                                     rootClass:[GCVNWebDetectionRoot class]
                                          file:GCVNWebDetectionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GCVNWebDetection__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GCVNWebDetection_WebEntity

@implementation GCVNWebDetection_WebEntity

@dynamic entityId;
@dynamic score;
@dynamic description_p;

typedef struct GCVNWebDetection_WebEntity__storage_ {
  uint32_t _has_storage_[1];
  float score;
  NSString *entityId;
  NSString *description_p;
} GCVNWebDetection_WebEntity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entityId",
        .dataTypeSpecific.className = NULL,
        .number = GCVNWebDetection_WebEntity_FieldNumber_EntityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebEntity__storage_, entityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = GCVNWebDetection_WebEntity_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebEntity__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = GCVNWebDetection_WebEntity_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebEntity__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GCVNWebDetection_WebEntity class]
                                     rootClass:[GCVNWebDetectionRoot class]
                                          file:GCVNWebDetectionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GCVNWebDetection_WebEntity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GCVNWebDetection)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GCVNWebDetection_WebImage

@implementation GCVNWebDetection_WebImage

@dynamic URL;
@dynamic score;

typedef struct GCVNWebDetection_WebImage__storage_ {
  uint32_t _has_storage_[1];
  float score;
  NSString *URL;
} GCVNWebDetection_WebImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = GCVNWebDetection_WebImage_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebImage__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = GCVNWebDetection_WebImage_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebImage__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GCVNWebDetection_WebImage class]
                                     rootClass:[GCVNWebDetectionRoot class]
                                          file:GCVNWebDetectionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GCVNWebDetection_WebImage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GCVNWebDetection)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GCVNWebDetection_WebPage

@implementation GCVNWebDetection_WebPage

@dynamic URL;
@dynamic score;
@dynamic pageTitle;
@dynamic fullMatchingImagesArray, fullMatchingImagesArray_Count;
@dynamic partialMatchingImagesArray, partialMatchingImagesArray_Count;

typedef struct GCVNWebDetection_WebPage__storage_ {
  uint32_t _has_storage_[1];
  float score;
  NSString *URL;
  NSString *pageTitle;
  NSMutableArray *fullMatchingImagesArray;
  NSMutableArray *partialMatchingImagesArray;
} GCVNWebDetection_WebPage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = GCVNWebDetection_WebPage_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebPage__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = GCVNWebDetection_WebPage_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebPage__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "pageTitle",
        .dataTypeSpecific.className = NULL,
        .number = GCVNWebDetection_WebPage_FieldNumber_PageTitle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebPage__storage_, pageTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fullMatchingImagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNWebDetection_WebImage),
        .number = GCVNWebDetection_WebPage_FieldNumber_FullMatchingImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebPage__storage_, fullMatchingImagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "partialMatchingImagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNWebDetection_WebImage),
        .number = GCVNWebDetection_WebPage_FieldNumber_PartialMatchingImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebPage__storage_, partialMatchingImagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GCVNWebDetection_WebPage class]
                                     rootClass:[GCVNWebDetectionRoot class]
                                          file:GCVNWebDetectionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GCVNWebDetection_WebPage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GCVNWebDetection)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GCVNWebDetection_WebLabel

@implementation GCVNWebDetection_WebLabel

@dynamic label;
@dynamic languageCode;

typedef struct GCVNWebDetection_WebLabel__storage_ {
  uint32_t _has_storage_[1];
  NSString *label;
  NSString *languageCode;
} GCVNWebDetection_WebLabel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "label",
        .dataTypeSpecific.className = NULL,
        .number = GCVNWebDetection_WebLabel_FieldNumber_Label,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebLabel__storage_, label),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = GCVNWebDetection_WebLabel_FieldNumber_LanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GCVNWebDetection_WebLabel__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GCVNWebDetection_WebLabel class]
                                     rootClass:[GCVNWebDetectionRoot class]
                                          file:GCVNWebDetectionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GCVNWebDetection_WebLabel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GCVNWebDetection)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
