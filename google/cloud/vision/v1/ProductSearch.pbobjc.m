// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/vision/v1/product_search.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <googleapis/ProductSearch.pbobjc.h>
#import <googleapis/Annotations.pbobjc.h>
#import <googleapis/Geometry.pbobjc.h>
#import <googleapis/ProductSearchService.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GCVNProductSearchRoot

@implementation GCVNProductSearchRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - GCVNProductSearchRoot_FileDescriptor

static GPBFileDescriptor *GCVNProductSearchRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.vision.v1"
                                                 objcPrefix:@"GCVN"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GCVNProductSearchParams

@implementation GCVNProductSearchParams

@dynamic hasBoundingPoly, boundingPoly;
@dynamic productSet;
@dynamic productCategoriesArray, productCategoriesArray_Count;
@dynamic filter;

typedef struct GCVNProductSearchParams__storage_ {
  uint32_t _has_storage_[1];
  NSString *productSet;
  NSMutableArray *productCategoriesArray;
  NSString *filter;
  GCVNBoundingPoly *boundingPoly;
} GCVNProductSearchParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "productSet",
        .dataTypeSpecific.className = NULL,
        .number = GCVNProductSearchParams_FieldNumber_ProductSet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GCVNProductSearchParams__storage_, productSet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "productCategoriesArray",
        .dataTypeSpecific.className = NULL,
        .number = GCVNProductSearchParams_FieldNumber_ProductCategoriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNProductSearchParams__storage_, productCategoriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "filter",
        .dataTypeSpecific.className = NULL,
        .number = GCVNProductSearchParams_FieldNumber_Filter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GCVNProductSearchParams__storage_, filter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boundingPoly",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNBoundingPoly),
        .number = GCVNProductSearchParams_FieldNumber_BoundingPoly,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GCVNProductSearchParams__storage_, boundingPoly),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GCVNProductSearchParams class]
                                     rootClass:[GCVNProductSearchRoot class]
                                          file:GCVNProductSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GCVNProductSearchParams__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GCVNProductSearchResults

@implementation GCVNProductSearchResults

@dynamic hasIndexTime, indexTime;
@dynamic resultsArray, resultsArray_Count;
@dynamic productGroupedResultsArray, productGroupedResultsArray_Count;

typedef struct GCVNProductSearchResults__storage_ {
  uint32_t _has_storage_[1];
  GPBTimestamp *indexTime;
  NSMutableArray *resultsArray;
  NSMutableArray *productGroupedResultsArray;
} GCVNProductSearchResults__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "indexTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = GCVNProductSearchResults_FieldNumber_IndexTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GCVNProductSearchResults__storage_, indexTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resultsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNProductSearchResults_Result),
        .number = GCVNProductSearchResults_FieldNumber_ResultsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNProductSearchResults__storage_, resultsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "productGroupedResultsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNProductSearchResults_GroupedResult),
        .number = GCVNProductSearchResults_FieldNumber_ProductGroupedResultsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNProductSearchResults__storage_, productGroupedResultsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GCVNProductSearchResults class]
                                     rootClass:[GCVNProductSearchRoot class]
                                          file:GCVNProductSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GCVNProductSearchResults__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GCVNProductSearchResults_Result

@implementation GCVNProductSearchResults_Result

@dynamic hasProduct, product;
@dynamic score;
@dynamic image;

typedef struct GCVNProductSearchResults_Result__storage_ {
  uint32_t _has_storage_[1];
  float score;
  GCVNProduct *product;
  NSString *image;
} GCVNProductSearchResults_Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "product",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNProduct),
        .number = GCVNProductSearchResults_Result_FieldNumber_Product,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GCVNProductSearchResults_Result__storage_, product),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = GCVNProductSearchResults_Result_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GCVNProductSearchResults_Result__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = GCVNProductSearchResults_Result_FieldNumber_Image,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GCVNProductSearchResults_Result__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GCVNProductSearchResults_Result class]
                                     rootClass:[GCVNProductSearchRoot class]
                                          file:GCVNProductSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GCVNProductSearchResults_Result__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GCVNProductSearchResults)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GCVNProductSearchResults_GroupedResult

@implementation GCVNProductSearchResults_GroupedResult

@dynamic hasBoundingPoly, boundingPoly;
@dynamic resultsArray, resultsArray_Count;

typedef struct GCVNProductSearchResults_GroupedResult__storage_ {
  uint32_t _has_storage_[1];
  GCVNBoundingPoly *boundingPoly;
  NSMutableArray *resultsArray;
} GCVNProductSearchResults_GroupedResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boundingPoly",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNBoundingPoly),
        .number = GCVNProductSearchResults_GroupedResult_FieldNumber_BoundingPoly,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GCVNProductSearchResults_GroupedResult__storage_, boundingPoly),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resultsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GCVNProductSearchResults_Result),
        .number = GCVNProductSearchResults_GroupedResult_FieldNumber_ResultsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GCVNProductSearchResults_GroupedResult__storage_, resultsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GCVNProductSearchResults_GroupedResult class]
                                     rootClass:[GCVNProductSearchRoot class]
                                          file:GCVNProductSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GCVNProductSearchResults_GroupedResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GCVNProductSearchResults)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
