// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/vision/v1/text_annotation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class GCVNBlock;
@class GCVNBoundingPoly;
@class GCVNPage;
@class GCVNParagraph;
@class GCVNSymbol;
@class GCVNTextAnnotation_DetectedBreak;
@class GCVNTextAnnotation_DetectedLanguage;
@class GCVNTextAnnotation_TextProperty;
@class GCVNWord;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum GCVNTextAnnotation_DetectedBreak_BreakType

/** Enum to denote the type of break found. New line, space etc. */
typedef GPB_ENUM(GCVNTextAnnotation_DetectedBreak_BreakType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  GCVNTextAnnotation_DetectedBreak_BreakType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Unknown break label type. */
  GCVNTextAnnotation_DetectedBreak_BreakType_Unknown = 0,

  /** Regular space. */
  GCVNTextAnnotation_DetectedBreak_BreakType_Space = 1,

  /** Sure space (very wide). */
  GCVNTextAnnotation_DetectedBreak_BreakType_SureSpace = 2,

  /** Line-wrapping break. */
  GCVNTextAnnotation_DetectedBreak_BreakType_EolSureSpace = 3,

  /**
   * End-line hyphen that is not present in text; does not co-occur with
   * `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.
   **/
  GCVNTextAnnotation_DetectedBreak_BreakType_Hyphen = 4,

  /** Line break that ends a paragraph. */
  GCVNTextAnnotation_DetectedBreak_BreakType_LineBreak = 5,
};

GPBEnumDescriptor *GCVNTextAnnotation_DetectedBreak_BreakType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GCVNTextAnnotation_DetectedBreak_BreakType_IsValidValue(int32_t value);

#pragma mark - Enum GCVNBlock_BlockType

/** Type of a block (text, image etc) as identified by OCR. */
typedef GPB_ENUM(GCVNBlock_BlockType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  GCVNBlock_BlockType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Unknown block type. */
  GCVNBlock_BlockType_Unknown = 0,

  /** Regular text block. */
  GCVNBlock_BlockType_Text = 1,

  /** Table block. */
  GCVNBlock_BlockType_Table = 2,

  /** Image block. */
  GCVNBlock_BlockType_Picture = 3,

  /** Horizontal/vertical line box. */
  GCVNBlock_BlockType_Ruler = 4,

  /** Barcode block. */
  GCVNBlock_BlockType_Barcode = 5,
};

GPBEnumDescriptor *GCVNBlock_BlockType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GCVNBlock_BlockType_IsValidValue(int32_t value);

#pragma mark - GCVNTextAnnotationRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface GCVNTextAnnotationRoot : GPBRootObject
@end

#pragma mark - GCVNTextAnnotation

typedef GPB_ENUM(GCVNTextAnnotation_FieldNumber) {
  GCVNTextAnnotation_FieldNumber_PagesArray = 1,
  GCVNTextAnnotation_FieldNumber_Text = 2,
};

/**
 * TextAnnotation contains a structured representation of OCR extracted text.
 * The hierarchy of an OCR extracted text structure is like this:
 *     TextAnnotation -> Page -> Block -> Paragraph -> Word -> Symbol
 * Each structural component, starting from Page, may further have their own
 * properties. Properties describe detected languages, breaks etc.. Please refer
 * to the [TextAnnotation.TextProperty][google.cloud.vision.v1.TextAnnotation.TextProperty] message definition below for more
 * detail.
 **/
@interface GCVNTextAnnotation : GPBMessage

/** List of pages detected by OCR. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GCVNPage*> *pagesArray;
/** The number of items in @c pagesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger pagesArray_Count;

/** UTF-8 text detected on the pages. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

@end

#pragma mark - GCVNTextAnnotation_DetectedLanguage

typedef GPB_ENUM(GCVNTextAnnotation_DetectedLanguage_FieldNumber) {
  GCVNTextAnnotation_DetectedLanguage_FieldNumber_LanguageCode = 1,
  GCVNTextAnnotation_DetectedLanguage_FieldNumber_Confidence = 2,
};

/**
 * Detected language for a structural component.
 **/
@interface GCVNTextAnnotation_DetectedLanguage : GPBMessage

/**
 * The BCP-47 language code, such as "en-US" or "sr-Latn". For more
 * information, see
 * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *languageCode;

/** Confidence of detected language. Range [0, 1]. */
@property(nonatomic, readwrite) float confidence;

@end

#pragma mark - GCVNTextAnnotation_DetectedBreak

typedef GPB_ENUM(GCVNTextAnnotation_DetectedBreak_FieldNumber) {
  GCVNTextAnnotation_DetectedBreak_FieldNumber_Type = 1,
  GCVNTextAnnotation_DetectedBreak_FieldNumber_IsPrefix = 2,
};

/**
 * Detected start or end of a structural component.
 **/
@interface GCVNTextAnnotation_DetectedBreak : GPBMessage

/** Detected break type. */
@property(nonatomic, readwrite) GCVNTextAnnotation_DetectedBreak_BreakType type;

/** True if break prepends the element. */
@property(nonatomic, readwrite) BOOL isPrefix;

@end

/**
 * Fetches the raw value of a @c GCVNTextAnnotation_DetectedBreak's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t GCVNTextAnnotation_DetectedBreak_Type_RawValue(GCVNTextAnnotation_DetectedBreak *message);
/**
 * Sets the raw value of an @c GCVNTextAnnotation_DetectedBreak's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetGCVNTextAnnotation_DetectedBreak_Type_RawValue(GCVNTextAnnotation_DetectedBreak *message, int32_t value);

#pragma mark - GCVNTextAnnotation_TextProperty

typedef GPB_ENUM(GCVNTextAnnotation_TextProperty_FieldNumber) {
  GCVNTextAnnotation_TextProperty_FieldNumber_DetectedLanguagesArray = 1,
  GCVNTextAnnotation_TextProperty_FieldNumber_DetectedBreak = 2,
};

/**
 * Additional information detected on the structural component.
 **/
@interface GCVNTextAnnotation_TextProperty : GPBMessage

/** A list of detected languages together with confidence. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GCVNTextAnnotation_DetectedLanguage*> *detectedLanguagesArray;
/** The number of items in @c detectedLanguagesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger detectedLanguagesArray_Count;

/** Detected start or end of a text segment. */
@property(nonatomic, readwrite, strong, null_resettable) GCVNTextAnnotation_DetectedBreak *detectedBreak;
/** Test to see if @c detectedBreak has been set. */
@property(nonatomic, readwrite) BOOL hasDetectedBreak;

@end

#pragma mark - GCVNPage

typedef GPB_ENUM(GCVNPage_FieldNumber) {
  GCVNPage_FieldNumber_Property = 1,
  GCVNPage_FieldNumber_Width = 2,
  GCVNPage_FieldNumber_Height = 3,
  GCVNPage_FieldNumber_BlocksArray = 4,
  GCVNPage_FieldNumber_Confidence = 5,
};

/**
 * Detected page from OCR.
 **/
@interface GCVNPage : GPBMessage

/** Additional information detected on the page. */
@property(nonatomic, readwrite, strong, null_resettable) GCVNTextAnnotation_TextProperty *property;
/** Test to see if @c property has been set. */
@property(nonatomic, readwrite) BOOL hasProperty;

/**
 * Page width. For PDFs the unit is points. For images (including
 * TIFFs) the unit is pixels.
 **/
@property(nonatomic, readwrite) int32_t width;

/**
 * Page height. For PDFs the unit is points. For images (including
 * TIFFs) the unit is pixels.
 **/
@property(nonatomic, readwrite) int32_t height;

/** List of blocks of text, images etc on this page. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GCVNBlock*> *blocksArray;
/** The number of items in @c blocksArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger blocksArray_Count;

/** Confidence of the OCR results on the page. Range [0, 1]. */
@property(nonatomic, readwrite) float confidence;

@end

#pragma mark - GCVNBlock

typedef GPB_ENUM(GCVNBlock_FieldNumber) {
  GCVNBlock_FieldNumber_Property = 1,
  GCVNBlock_FieldNumber_BoundingBox = 2,
  GCVNBlock_FieldNumber_ParagraphsArray = 3,
  GCVNBlock_FieldNumber_BlockType = 4,
  GCVNBlock_FieldNumber_Confidence = 5,
};

/**
 * Logical element on the page.
 **/
@interface GCVNBlock : GPBMessage

/** Additional information detected for the block. */
@property(nonatomic, readwrite, strong, null_resettable) GCVNTextAnnotation_TextProperty *property;
/** Test to see if @c property has been set. */
@property(nonatomic, readwrite) BOOL hasProperty;

/**
 * The bounding box for the block.
 * The vertices are in the order of top-left, top-right, bottom-right,
 * bottom-left. When a rotation of the bounding box is detected the rotation
 * is represented as around the top-left corner as defined when the text is
 * read in the 'natural' orientation.
 * For example:
 *
 * * when the text is horizontal it might look like:
 *
 *         0----1
 *         |    |
 *         3----2
 *
 * * when it's rotated 180 degrees around the top-left corner it becomes:
 *
 *         2----3
 *         |    |
 *         1----0
 *
 *   and the vertex order will still be (0, 1, 2, 3).
 **/
@property(nonatomic, readwrite, strong, null_resettable) GCVNBoundingPoly *boundingBox;
/** Test to see if @c boundingBox has been set. */
@property(nonatomic, readwrite) BOOL hasBoundingBox;

/** List of paragraphs in this block (if this blocks is of type text). */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GCVNParagraph*> *paragraphsArray;
/** The number of items in @c paragraphsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger paragraphsArray_Count;

/** Detected block type (text, image etc) for this block. */
@property(nonatomic, readwrite) GCVNBlock_BlockType blockType;

/** Confidence of the OCR results on the block. Range [0, 1]. */
@property(nonatomic, readwrite) float confidence;

@end

/**
 * Fetches the raw value of a @c GCVNBlock's @c blockType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t GCVNBlock_BlockType_RawValue(GCVNBlock *message);
/**
 * Sets the raw value of an @c GCVNBlock's @c blockType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetGCVNBlock_BlockType_RawValue(GCVNBlock *message, int32_t value);

#pragma mark - GCVNParagraph

typedef GPB_ENUM(GCVNParagraph_FieldNumber) {
  GCVNParagraph_FieldNumber_Property = 1,
  GCVNParagraph_FieldNumber_BoundingBox = 2,
  GCVNParagraph_FieldNumber_WordsArray = 3,
  GCVNParagraph_FieldNumber_Confidence = 4,
};

/**
 * Structural unit of text representing a number of words in certain order.
 **/
@interface GCVNParagraph : GPBMessage

/** Additional information detected for the paragraph. */
@property(nonatomic, readwrite, strong, null_resettable) GCVNTextAnnotation_TextProperty *property;
/** Test to see if @c property has been set. */
@property(nonatomic, readwrite) BOOL hasProperty;

/**
 * The bounding box for the paragraph.
 * The vertices are in the order of top-left, top-right, bottom-right,
 * bottom-left. When a rotation of the bounding box is detected the rotation
 * is represented as around the top-left corner as defined when the text is
 * read in the 'natural' orientation.
 * For example:
 *   * when the text is horizontal it might look like:
 *      0----1
 *      |    |
 *      3----2
 *   * when it's rotated 180 degrees around the top-left corner it becomes:
 *      2----3
 *      |    |
 *      1----0
 *   and the vertex order will still be (0, 1, 2, 3).
 **/
@property(nonatomic, readwrite, strong, null_resettable) GCVNBoundingPoly *boundingBox;
/** Test to see if @c boundingBox has been set. */
@property(nonatomic, readwrite) BOOL hasBoundingBox;

/** List of words in this paragraph. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GCVNWord*> *wordsArray;
/** The number of items in @c wordsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger wordsArray_Count;

/** Confidence of the OCR results for the paragraph. Range [0, 1]. */
@property(nonatomic, readwrite) float confidence;

@end

#pragma mark - GCVNWord

typedef GPB_ENUM(GCVNWord_FieldNumber) {
  GCVNWord_FieldNumber_Property = 1,
  GCVNWord_FieldNumber_BoundingBox = 2,
  GCVNWord_FieldNumber_SymbolsArray = 3,
  GCVNWord_FieldNumber_Confidence = 4,
};

/**
 * A word representation.
 **/
@interface GCVNWord : GPBMessage

/** Additional information detected for the word. */
@property(nonatomic, readwrite, strong, null_resettable) GCVNTextAnnotation_TextProperty *property;
/** Test to see if @c property has been set. */
@property(nonatomic, readwrite) BOOL hasProperty;

/**
 * The bounding box for the word.
 * The vertices are in the order of top-left, top-right, bottom-right,
 * bottom-left. When a rotation of the bounding box is detected the rotation
 * is represented as around the top-left corner as defined when the text is
 * read in the 'natural' orientation.
 * For example:
 *   * when the text is horizontal it might look like:
 *      0----1
 *      |    |
 *      3----2
 *   * when it's rotated 180 degrees around the top-left corner it becomes:
 *      2----3
 *      |    |
 *      1----0
 *   and the vertex order will still be (0, 1, 2, 3).
 **/
@property(nonatomic, readwrite, strong, null_resettable) GCVNBoundingPoly *boundingBox;
/** Test to see if @c boundingBox has been set. */
@property(nonatomic, readwrite) BOOL hasBoundingBox;

/**
 * List of symbols in the word.
 * The order of the symbols follows the natural reading order.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GCVNSymbol*> *symbolsArray;
/** The number of items in @c symbolsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger symbolsArray_Count;

/** Confidence of the OCR results for the word. Range [0, 1]. */
@property(nonatomic, readwrite) float confidence;

@end

#pragma mark - GCVNSymbol

typedef GPB_ENUM(GCVNSymbol_FieldNumber) {
  GCVNSymbol_FieldNumber_Property = 1,
  GCVNSymbol_FieldNumber_BoundingBox = 2,
  GCVNSymbol_FieldNumber_Text = 3,
  GCVNSymbol_FieldNumber_Confidence = 4,
};

/**
 * A single symbol representation.
 **/
@interface GCVNSymbol : GPBMessage

/** Additional information detected for the symbol. */
@property(nonatomic, readwrite, strong, null_resettable) GCVNTextAnnotation_TextProperty *property;
/** Test to see if @c property has been set. */
@property(nonatomic, readwrite) BOOL hasProperty;

/**
 * The bounding box for the symbol.
 * The vertices are in the order of top-left, top-right, bottom-right,
 * bottom-left. When a rotation of the bounding box is detected the rotation
 * is represented as around the top-left corner as defined when the text is
 * read in the 'natural' orientation.
 * For example:
 *   * when the text is horizontal it might look like:
 *      0----1
 *      |    |
 *      3----2
 *   * when it's rotated 180 degrees around the top-left corner it becomes:
 *      2----3
 *      |    |
 *      1----0
 *   and the vertice order will still be (0, 1, 2, 3).
 **/
@property(nonatomic, readwrite, strong, null_resettable) GCVNBoundingPoly *boundingBox;
/** Test to see if @c boundingBox has been set. */
@property(nonatomic, readwrite) BOOL hasBoundingBox;

/** The actual UTF-8 representation of the symbol. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

/** Confidence of the OCR results for the symbol. Range [0, 1]. */
@property(nonatomic, readwrite) float confidence;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
